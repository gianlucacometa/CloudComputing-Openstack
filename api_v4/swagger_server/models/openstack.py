# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Openstack(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, server_name: str=None, image_name: str=None, flavor_name: str=None, network_name: str=None, start_creation: str=None, end_creation: str=None):  # noqa: E501
        """Openstack - a model defined in Swagger

        :param server_name: The server_name of this Openstack.  # noqa: E501
        :type server_name: str
        :param image_name: The image_name of this Openstack.  # noqa: E501
        :type image_name: str
        :param flavor_name: The flavor_name of this Openstack.  # noqa: E501
        :type flavor_name: str
        :param network_name: The network_name of this Openstack.  # noqa: E501
        :type network_name: str
        :param start_creation: The start_creation of this Openstack.  # noqa: E501
        :type start_creation: str
        :param end_creation: The end_creation of this Openstack.  # noqa: E501
        :type end_creation: str
        """
        self.swagger_types = {
            'server_name': str,
            'image_name': str,
            'flavor_name': str,
            'network_name': str,
            'start_creation': str,
            'end_creation': str
        }

        self.attribute_map = {
            'server_name': 'ServerName',
            'image_name': 'ImageName',
            'flavor_name': 'FlavorName',
            'network_name': 'NetworkName',
            'start_creation': 'StartCreation',
            'end_creation': 'EndCreation'
        }

        self._server_name = server_name
        self._image_name = image_name
        self._flavor_name = flavor_name
        self._network_name = network_name
        self._start_creation = start_creation
        self._end_creation = end_creation

    @classmethod
    def from_dict(cls, dikt) -> 'Openstack':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Openstack of this Openstack.  # noqa: E501
        :rtype: Openstack
        """
        return util.deserialize_model(dikt, cls)

    @property
    def server_name(self) -> str:
        """Gets the server_name of this Openstack.


        :return: The server_name of this Openstack.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name: str):
        """Sets the server_name of this Openstack.


        :param server_name: The server_name of this Openstack.
        :type server_name: str
        """

        self._server_name = server_name

    @property
    def image_name(self) -> str:
        """Gets the image_name of this Openstack.


        :return: The image_name of this Openstack.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name: str):
        """Sets the image_name of this Openstack.


        :param image_name: The image_name of this Openstack.
        :type image_name: str
        """

        self._image_name = image_name

    @property
    def flavor_name(self) -> str:
        """Gets the flavor_name of this Openstack.


        :return: The flavor_name of this Openstack.
        :rtype: str
        """
        return self._flavor_name

    @flavor_name.setter
    def flavor_name(self, flavor_name: str):
        """Sets the flavor_name of this Openstack.


        :param flavor_name: The flavor_name of this Openstack.
        :type flavor_name: str
        """

        self._flavor_name = flavor_name

    @property
    def network_name(self) -> str:
        """Gets the network_name of this Openstack.


        :return: The network_name of this Openstack.
        :rtype: str
        """
        return self._network_name

    @network_name.setter
    def network_name(self, network_name: str):
        """Sets the network_name of this Openstack.


        :param network_name: The network_name of this Openstack.
        :type network_name: str
        """

        self._network_name = network_name

    @property
    def start_creation(self) -> str:
        """Gets the start_creation of this Openstack.


        :return: The start_creation of this Openstack.
        :rtype: str
        """
        return self._start_creation

    @start_creation.setter
    def start_creation(self, start_creation: str):
        """Sets the start_creation of this Openstack.


        :param start_creation: The start_creation of this Openstack.
        :type start_creation: str
        """

        self._start_creation = start_creation

    @property
    def end_creation(self) -> str:
        """Gets the end_creation of this Openstack.


        :return: The end_creation of this Openstack.
        :rtype: str
        """
        return self._end_creation

    @end_creation.setter
    def end_creation(self, end_creation: str):
        """Sets the end_creation of this Openstack.


        :param end_creation: The end_creation of this Openstack.
        :type end_creation: str
        """

        self._end_creation = end_creation
